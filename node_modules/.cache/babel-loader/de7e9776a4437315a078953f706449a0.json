{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _TextInputComponent = require('./TextInputComponent');\n\nvar _TextInputComponent2 = _interopRequireDefault(_TextInputComponent);\n\nvar _WithError = require('./WithError');\n\nvar _WithError2 = _interopRequireDefault(_WithError);\n\nvar _reduxForm = require('./utility/redux-form');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\nvar TextInput = (_temp2 = _class = function (_PureComponent) {\n  _inherits(TextInput, _PureComponent);\n\n  function TextInput() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TextInput);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.storeInputNode = function (node) {\n      return _this.input = node;\n    }, _this.focus = function () {\n      return _this.input.focus();\n    }, _this.onFocus = function (event) {\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n\n      _this.setState({\n        isFocused: true\n      });\n    }, _this.onBlur = function (event) {\n      var _this$props = _this.props,\n          onBlur = _this$props.onBlur,\n          value = _this$props.value;\n\n      if (onBlur) {\n        (0, _reduxForm.onBlurForReduxForm)(onBlur, event, value);\n      }\n\n      _this.setState({\n        isFocused: false\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(TextInput, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          indicateInvalid = _props.indicateInvalid,\n          error = _props.error,\n          style = _props.style,\n          className = _props.className,\n          password = _props.password,\n          email = _props.email,\n          rest = _objectWithoutProperties(_props, ['indicateInvalid', 'error', 'style', 'className', 'password', 'email']);\n\n      var isFocused = this.state.isFocused; // Deprecated.\n      // Use `type=\"password\"` instead.\n\n      if (password) {\n        rest.type = 'password';\n      } // Deprecated.\n      // Use `type=\"email\"` instead.\n\n\n      if (email) {\n        rest.type = 'email';\n      }\n\n      return _react2.default.createElement(_WithError2.default, {\n        error: error,\n        indicateInvalid: indicateInvalid,\n        style: style,\n        className: (0, _classnames2.default)(className, 'rrui__text-input', {\n          'rrui__text-input--focus': isFocused\n        })\n      }, _react2.default.createElement(_TextInputComponent2.default, _extends({}, rest, {\n        inputRef: this.storeInputNode,\n        error: error,\n        indicateInvalid: indicateInvalid,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur\n      })));\n    } // render_static()\n    // {\n    // \tconst { label } = this.props\n    //\n    // \treturn (\n    // \t\t<div className=\"rrui__rich__fallback\">\n    // \t\t\t<Input {...this.props} placeholder={label} />\n    // \t\t</div>\n    // \t)\n    // }\n\n  }]);\n\n  return TextInput;\n}(PureComponent), _class.propTypes = {\n  // Text field label\n  label: _propTypes2.default.string,\n  // HTML form input `name` attribute\n  name: _propTypes2.default.string,\n  // Text field value\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  // Is called when the `value` is edited\n  onChange: _propTypes2.default.func.isRequired,\n  // A custom input component.\n  inputComponent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),\n  // Disables the text field\n  disabled: _propTypes2.default.bool,\n  // Renders an error message below the `<input/>`\n  error: _propTypes2.default.string,\n  // If this flag is `true` then the `error` is shown.\n  // If this flag is `false` then the `error` is not shown (even if passed).\n  indicateInvalid: _propTypes2.default.bool,\n  // Set to `true` to mark the field as required\n  required: _propTypes2.default.bool,\n  // `<input/>` placeholder\n  placeholder: _propTypes2.default.string,\n  // `<textarea/>` instead of an `<input type=\"text\"/>`\n  multiline: _propTypes2.default.bool,\n  // Deprecated.\n  // Use `type=\"email\"` instead.\n  // Sets HTML input `type` attribute to `email`\n  email: _propTypes2.default.bool,\n  // Deprecated.\n  // Use `type=\"password\"` instead.\n  // Sets HTML input `type` attribute to `password`\n  password: _propTypes2.default.bool,\n  // Autofocuses the input field\n  focus: _propTypes2.default.bool,\n  // HTML `tabindex` attribute\n  tabIndex: _propTypes2.default.number,\n  // `<textarea/>` `rows` attribute (row count, i.e. height)\n  rows: _propTypes2.default.number,\n  // `<textarea/>` `cols` attribute (column count, i.e. width)\n  cols: _propTypes2.default.number,\n  // Is called when the input is focused\n  onFocus: _propTypes2.default.func,\n  // `onKeyDown` event handler\n  onKeyDown: _propTypes2.default.func,\n  // Is called when the input is blurred\n  onBlur: _propTypes2.default.func,\n  // Is called when the input is clicked\n  onClick: _propTypes2.default.func,\n  // CSS style object\n  style: _propTypes2.default.object,\n  // CSS name\n  className: _propTypes2.default.string,\n  // CSS style object for `<input/>`\n  inputStyle: _propTypes2.default.object\n}, _class.defaultProps = {\n  // Show `error` (if passed).\n  indicateInvalid: true\n}, _temp2);\nexports.default = TextInput;","map":null,"metadata":{},"sourceType":"script"}