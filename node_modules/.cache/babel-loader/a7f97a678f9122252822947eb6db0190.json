{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // The original idea is by `what-input` library.\n// https://github.com/ten1seven/what-input\n//\n// Still, seems that \"Screen Readers\" emit all sorts of\n// pointer events even when using only keyboard navigation.\n// https://patrickhlauke.github.io/touch/tests/results/#desktop-assistive-technology-events\n//\n// So, listening to pointer events and deciding on the input method\n// is not a 100%-formally-correct technique (though it does make perfect sense).\n// So, for having one's ass covered it's not considered a reliable strategy.\n//\n// There's a script listening for `mousedown` events on each button/link/input\n// which then removes the outline (and adds it when it detects a keyboard event).\n// https://github.com/lindsayevans/outline.js\n\n\nvar KeyboardNavigationListener = function (_React$Component) {\n  _inherits(KeyboardNavigationListener, _React$Component);\n\n  function KeyboardNavigationListener() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, KeyboardNavigationListener);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = KeyboardNavigationListener.__proto__ || Object.getPrototypeOf(KeyboardNavigationListener)).call.apply(_ref, [this].concat(args))), _this), _this.onKeyDown = function (event) {\n      if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        // \"Tab\".\n        case 9:\n          if (!_this.tabbing) {\n            _this.tabbing = true;\n            document.body.classList.add('rrui__tabbing');\n          }\n\n          return;\n      }\n    }, _this.onPointerEvent = function (event) {\n      if (_this.tabbing) {\n        _this.tabbing = false;\n        document.body.classList.remove('rrui__tabbing');\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(KeyboardNavigationListener, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      window.addEventListener('keydown', this.onKeyDown); // \"Pointer\" events are mouse/stylus/pen/touch events.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\n\n      if (window.PointerEvent) {\n        window.addEventListener('pointermove', this.onPointerEvent);\n        window.addEventListener('pointerdown', this.onPointerEvent);\n      } else {\n        // Mouse events.\n        window.addEventListener('mousemove', this.onPointerEvent);\n        window.addEventListener('mousedown', this.onPointerEvent); // Touch events.\n\n        if ('ontouchstart' in window) {\n          window.addEventListener('touchstart', this.onPointerEvent);\n          window.addEventListener('touchend', this.onPointerEvent);\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('keydown', this.onKeyDown); // \"Pointer\" events are mouse/stylus/pen/touch events.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\n\n      if (window.PointerEvent) {\n        window.removeEventListener('pointermove', this.onPointerEvent);\n        window.removeEventListener('pointerdown', this.onPointerEvent);\n      } else {\n        // Mouse events.\n        window.removeEventListener('mousemove', this.onPointerEvent);\n        window.removeEventListener('mousedown', this.onPointerEvent); // Touch events.\n\n        if ('ontouchstart' in window) {\n          window.removeEventListener('touchstart', this.onPointerEvent);\n          window.removeEventListener('touchend', this.onPointerEvent);\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return KeyboardNavigationListener;\n}(_react2.default.Component);\n\nexports.default = KeyboardNavigationListener;","map":null,"metadata":{},"sourceType":"script"}