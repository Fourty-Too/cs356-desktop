{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component; // Sits at the bottom of a page and displays notifications\n\nvar Snackbar = (_temp2 = _class = function (_PureComponent) {\n  _inherits(Snackbar, _PureComponent);\n\n  function Snackbar() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Snackbar);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Snackbar.__proto__ || Object.getPrototypeOf(Snackbar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.status = 'idle', _this.queue = [], _this.next = function () {\n      var _this$props = _this.props,\n          minTime = _this$props.minTime,\n          lengthTimeFactor = _this$props.lengthTimeFactor; // Get the next notification from the queue\n      // (will be `undefined` if the queue is empty)\n\n      var value = _this.queue.shift(); // Reset the notification display\n\n\n      _this.setState({\n        value: value,\n        queueSize: _this.queue.length,\n        height: undefined,\n        wide: undefined,\n        hiding: false\n      }); // If the queue is empty, then just exit\n\n\n      if (!value) {\n        _this.status = 'idle';\n        return;\n      }\n\n      _this.status = 'active'; // `state.show` will be set to `true` later,\n      // when the height of the element is measured\n      // (which is after it renders)\n\n      if (value.duration === -1) {\n        return;\n      } // The total display duration (in milliseconds) of a snack\n      // is `minTime + message.length * lengthTimeFactor`\n\n\n      var length = typeof value.content === 'string' ? value.content.length : value.length || 0;\n      var duration = value.duration || minTime + length * lengthTimeFactor; // Hide the notification after it expires\n\n      _this.auto_hide_timer = setTimeout(_this.hide, duration);\n    }, _this.hide = function () {\n      var hideAnimationDuration = _this.props.hideAnimationDuration; // Start the hiding animation for the notification\n\n      _this.setState({\n        show: false,\n        hiding: true\n      }); // Display the next notification\n      // after the currently being hidden one\n      // finishes its hiding animation.\n\n\n      _this.show_next_snack_timeout = setTimeout(_this.next, hideAnimationDuration);\n    }, _this.storeContainerNode = function (node) {\n      return _this.container = node;\n    }, _this.storeSnackbarNode = function (node) {\n      return _this.snackbar = node;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Snackbar, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.auto_hide_timer);\n      clearTimeout(this.show_next_snack_timeout);\n      clearTimeout(this.show_snack_timeout);\n    }\n  }, {\n    key: 'receiveNewValue',\n    value: function receiveNewValue(prevProps) {\n      var value = this.props.value; // If `value` has changed then push it to the queue.\n\n      if (value && value !== prevProps.value) {\n        // Add the notification to the queue\n        this.push(value);\n      }\n    } // Adds a notification to the queue\n\n  }, {\n    key: 'push',\n    value: function push(newValue) {\n      // Add the notification to the queue\n      this.queue.push(newValue);\n      this.setState({\n        queueSize: this.queue.length\n      }); // If the notification queue was empty\n      // then kick-start it.\n\n      if (this.status === 'idle') {\n        this.next();\n      }\n    } // Displays the next notification in the queue\n\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      var _state = this.state,\n          height = _state.height,\n          value = _state.value; // If `value` got updated then push it to the list of `queue`.\n\n      this.receiveNewValue(prevProps); // The notification DOM element has just been rendered\n      // which means its dimensions are set by now.\n      // Calculate the notification container DOM element height\n      // so that the slide-from-bottom animation knows\n      // its target Y-position for the CSS `translate` transform.\n\n      if (height === undefined && value) {\n        height = this.snackbar.offsetHeight;\n        var wide = this.snackbar.offsetWidth === document.documentElement.clientWidth;\n        var marginBottom = parseInt(getComputedStyle(this.container).marginBottom);\n        var anti_lag_timeout = 100; // Otherwise it would jump to fully shown in Chrome when there's a queue of snacks waiting to be shown\n\n        this.setState({\n          height: height,\n          wide: wide,\n          marginBottom: marginBottom\n        }, function () {\n          _this2.show_snack_timeout = setTimeout(function () {\n            return _this2.setState({\n              show: true\n            });\n          }, anti_lag_timeout);\n        });\n      }\n    }\n  }, {\n    key: 'renderContent',\n    value: function renderContent(value) {\n      if (value.component) {\n        return value.component(_extends({}, value.props, {\n          hide: this.hide\n        }));\n      }\n\n      return null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var type = this.props.type;\n      var _state2 = this.state,\n          show = _state2.show,\n          value = _state2.value,\n          height = _state2.height,\n          wide = _state2.wide,\n          marginBottom = _state2.marginBottom,\n          hiding = _state2.hiding,\n          queueSize = _state2.queueSize;\n      var containerStyle = {};\n\n      if (!show) {\n        // If no snack is being shown,\n        // or if a snack is about to be shown,\n        // then shift it under the screen's bottom border\n        // to show the slide-from-bottom animation at the next step.\n        if (height !== undefined) {\n          containerStyle.transform = 'translateY(' + (height + marginBottom) + 'px)';\n        }\n\n        if (!hiding) {\n          containerStyle.transition = 'none';\n        }\n      }\n\n      return _react2.default.createElement('div', {\n        ref: this.storeContainerNode,\n        style: containerStyle,\n        className: (0, _classnames2.default)('rrui__snackbar__container', {\n          'rrui__snackbar__container--hidden': !show,\n          'rrui__snackbar__container--wide': wide\n        })\n      }, _react2.default.createElement('div', {\n        ref: this.storeSnackbarNode,\n        className: (0, _classnames2.default)('rrui__snackbar', value && value.type && 'rrui__snackbar--' + value.type)\n      }, _react2.default.createElement('div', {\n        className: 'rrui__snackbar__text'\n      }, value && (value.content !== undefined ? value.content : this.renderContent(value))), value && value.duration === -1 && queueSize > 0 && _react2.default.createElement('div', {\n        className: 'rrui__snackbar__count'\n      }, queueSize + 1)));\n    }\n  }]);\n\n  return Snackbar;\n}(PureComponent), _class.propTypes = {\n  // Snackbar value (either a message, or an object)\n  value: _propTypes2.default.shape({\n    // Notification content.\n    content: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),\n    // Instead of `content` property one may supply `component` property\n    // which must be a React component which receives all \"rest\" `value` properties\n    // and also `hide`property (a function that hides the notification).\n    component: _propTypes2.default.func,\n    // `props` are passed to `component`.\n    props: _propTypes2.default.object,\n    // If `content` is a `string` then its `length` is calculated automatically.\n    // Otherwise one may pass `length` manually.\n    // It's used for calculating notification `duration`.\n    length: _propTypes2.default.number,\n    // `type` is appended as a BEM modifier to `.rrui__snackbar` CSS class.\n    // E.g. `.rrui__snackbar--error` for `{ type: \"error\" }`.\n    type: _propTypes2.default.string,\n    // How long does the notification stay.\n    // Pass `-1` for it to stay until it's closed manually.\n    duration: _propTypes2.default.number\n  }),\n  // // \"Snack\" showing CSS animation duration.\n  // // Is 225 milliseconds by default.\n  // showAnimationDuration : PropTypes.number.isRequired,\n  // \"Snack\" hiding CSS animation duration.\n  // Is 195 milliseconds by default.\n  hideAnimationDuration: _propTypes2.default.number.isRequired,\n  // The total display duration (in milliseconds) of a snack\n  // is `minTime + message.length * lengthTimeFactor`\n  minTime: _propTypes2.default.number.isRequired,\n  lengthTimeFactor: _propTypes2.default.number.isRequired\n}, _class.defaultProps = {\n  // showAnimationDuration : 225,\n  hideAnimationDuration: 195,\n  minTime: 1200,\n  lengthTimeFactor: 60\n}, _temp2);\nexports.default = Snackbar;","map":null,"metadata":{},"sourceType":"script"}