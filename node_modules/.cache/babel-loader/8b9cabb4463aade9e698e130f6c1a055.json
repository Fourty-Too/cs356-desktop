{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _dom = require('./utility/dom');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component; // https://github.com/Dogfalo/materialize/blob/master/js/tooltip.js\n\nvar Tooltip = (_temp2 = _class = function (_PureComponent) {\n  _inherits(Tooltip, _PureComponent);\n\n  function Tooltip() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Tooltip);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.show = function () {\n      // Play tooltip showing animation\n      var animate = false; // If hiding animation is being played,\n      // then cancel it, and cancel setting\n      // `display` to `none` after it finishes playing.\n\n      if (_this.hide_timeout) {\n        clearTimeout(_this.hide_timeout);\n        _this.hide_timeout = undefined; // Abort tooltip hiding animation.\n        // It will automatically return to the \"showing\" state.\n\n        _this.tooltip.classList.remove('rrui__tooltip--before-hide');\n      } // Otherwise, the tooltip is hidden (or never been shown)\n      else {\n          // Not creating in `componentDidMount()`\n          // therefore create it here.\n          if (!_this.tooltip) {\n            _this.create_tooltip();\n          } // Play tooltip showing animation\n\n\n          animate = true;\n        } // Now that `this.tooltip` has been created,\n      // re-render the component so that `ReactDOM.createPortal()` is called.\n\n\n      _this.setState({\n        isShown: true\n      }, function () {\n        var _this$calculate_coord = _this.calculate_coordinates(),\n            x = _this$calculate_coord.x,\n            y = _this$calculate_coord.y;\n\n        _this.tooltip.style.left = x + 'px';\n        _this.tooltip.style.top = y + 'px'; // Play tooltip showing animation\n        // (doing it after setting position because\n        //  setting position applies `display: block`)\n\n        if (animate) {\n          _this.tooltip.classList.add('rrui__tooltip--after-show');\n        }\n      });\n    }, _this.hide = function () {\n      var hidingAnimationDuration = _this.props.hidingAnimationDuration; // If already hiding, or if already hidden, then do nothing.\n      // if (this.hide_timeout || this.tooltip.style.display === 'none')\n\n      if (_this.hide_timeout || !_this.tooltip) {\n        return;\n      } // Play tooltip hiding animation\n\n\n      _this.tooltip.classList.add('rrui__tooltip--before-hide'); // Set the tooltip to `display: none`\n      // after its hiding animation finishes.\n\n\n      _this.hide_timeout = setTimeout(function () {\n        _this.hide_timeout = undefined;\n\n        _this.destroy_tooltip();\n\n        _this.setState({\n          isShown: false\n        });\n      }, hidingAnimationDuration);\n    }, _this.on_mouse_enter = function () {\n      var content = _this.props.content; // mouse enter and mouse leave events\n      // are triggered on mobile devices too\n\n      if (_this.mobile) {\n        return;\n      } // If the tooltip has no content\n      // (e.g. `react-time-ago` first render)\n      // or if React Portal API is not available\n      // then don't show the tooltip.\n\n\n      if (!content || !_reactDom2.default.createPortal) {\n        return;\n      } // Shouldn't happen, because\n      // `mouse leave` event clears this timeout.\n\n\n      if (_this.show_timeout) {\n        return;\n      }\n\n      var delay = _this.props.delay; // Don't show the tooltip immediately\n      // but rather wait for the user to\n      // \"mouse over\" it for a short time interval.\n      // (prevents false positives)\n\n      _this.show_timeout = setTimeout(function () {\n        _this.show_timeout = undefined;\n\n        _this.show();\n      }, delay);\n    }, _this.on_mouse_leave = function () {\n      // mouse enter and mouse leave events\n      // are triggered on mobile devices too\n      if (_this.mobile) {\n        return;\n      } // If tooltip hasn't been shown yet,\n      // then cancel showing it.\n\n\n      if (_this.show_timeout) {\n        clearTimeout(_this.show_timeout);\n        _this.show_timeout = undefined;\n        return;\n      } // Otherwise, the tooltip is shown, so hide it.\n      //\n      // `window.rruiCollapseOnFocusOut` can be used\n      // for debugging expandable contents.\n\n\n      if (window.rruiCollapseOnFocusOut !== false) {\n        _this.hide();\n      }\n    }, _this.on_touch_start = function () {\n      var content = _this.props.content; // mouse enter events won't be processed from now on\n\n      _this.mobile = true; // If the tooltip has no content\n      // (e.g. `react-time-ago` first render)\n      // or if React Portal API is not available\n      // then don't show the tooltip.\n\n      if (!content || !_reactDom2.default.createPortal) {\n        return;\n      }\n\n      _this.show();\n    }, _this.storeOriginNode = function (ref) {\n      return _this.origin = ref;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Tooltip, [{\n    key: 'componentWillUnmount',\n    // componentDidMount()\n    // {\n    // \tthis.create_tooltip()\n    // }\n    value: function componentWillUnmount() {\n      clearTimeout(this.show_timeout);\n      clearTimeout(this.hide_timeout);\n      this.destroy_tooltip();\n    }\n  }, {\n    key: 'create_tooltip',\n    value: function create_tooltip() {\n      var tooltipClassName = this.props.tooltipClassName;\n      this.tooltip = document.createElement('div');\n      this.tooltip.style.position = 'absolute';\n      this.tooltip.style.left = 0;\n      this.tooltip.style.top = 0;\n      this.tooltip.classList.add('rrui__tooltip');\n\n      if (tooltipClassName) {\n        this.tooltip.classList.add(tooltipClassName);\n      }\n\n      this.container().appendChild(this.tooltip);\n    }\n  }, {\n    key: 'destroy_tooltip',\n    value: function destroy_tooltip() {\n      if (this.tooltip) {\n        // Won't throw an exception\n        this.tooltip.parentNode.removeChild(this.tooltip);\n        this.tooltip = undefined;\n      }\n    }\n  }, {\n    key: 'container',\n    value: function container() {\n      var container = this.props.container;\n      return container();\n    }\n  }, {\n    key: 'calculate_coordinates',\n    value: function calculate_coordinates() {\n      var width = this.tooltip.offsetWidth;\n      var height = this.tooltip.offsetHeight;\n      var origin = this.origin;\n      var origin_width = origin.offsetWidth;\n\n      var _offset = (0, _dom.getOffset)(origin);\n\n      var top = _offset.top - height - (0, _dom.getOffset)(this.container()).top;\n      var left = _offset.left + origin_width / 2 - width / 2;\n      return reposition_within_screen(left, top, width, height);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      // Shows tooltip on mouse over when on desktop.\n      // Shows tooltip on touch when on mobile.\n      var _props = this.props,\n          content = _props.content,\n          inline = _props.inline,\n          style = _props.style,\n          className = _props.className,\n          children = _props.children; // `ReactDOM.createPortal()` requires React >= 16.\n      // If it's not available then it won't show the tooltip.\n\n      return _react2.default.createElement('div', {\n        ref: this.storeOriginNode,\n        onMouseEnter: this.on_mouse_enter,\n        onMouseLeave: this.on_mouse_leave,\n        onTouchStart: this.on_touch_start,\n        onTouchMove: this.hide,\n        onTouchEnd: this.hide,\n        onTouchCancel: this.hide,\n        style: inline ? style ? _extends({}, inline_style, style) : inline_style : style,\n        className: (0, _classnames2.default)('rrui__tooltip__target', className)\n      }, children, this.tooltip && content && _reactDom2.default.createPortal && _reactDom2.default.createPortal(content, this.tooltip));\n    }\n  }]);\n\n  return Tooltip;\n}(PureComponent), _class.propTypes = {\n  // Tooltip content.\n  content: _propTypes2.default.node,\n  // Whether this element should be displayed as `inline-block`.\n  // (is `true` by default)\n  inline: _propTypes2.default.bool.isRequired,\n  // The delay before the tooltip is shown (in milliseconds)\n  delay: _propTypes2.default.number.isRequired,\n  // The duration of the tooltip hiding animation.\n  // The DOM element will retain `display: block` for this time period.\n  // When changing this timeout also change `transition` time for\n  // `.tooltip--after-show` and `.tooltip--before-hide` CSS classes.\n  // Is `120` by default.\n  hidingAnimationDuration: _propTypes2.default.number.isRequired,\n  // `container: () => DOMElement` property is optional\n  // and is gonna be the parent DOM Element for the tooltip itself\n  // (`document.body` by default).\n  // (in which case make sure that `document.body` has no `margin`\n  //  otherwise tooltip `left` and `top` positions will be slightly off).\n  container: _propTypes2.default.func,\n  // CSS style object\n  style: _propTypes2.default.object,\n  // CSS class name\n  className: _propTypes2.default.string,\n  // Tooltip CSS class name\n  tooltipClassName: _propTypes2.default.string\n}, _class.defaultProps = {\n  inline: true,\n  delay: 400,\n  // in milliseconds\n  hidingAnimationDuration: 200,\n  // in milliseconds\n  container: function container() {\n    return document.body;\n  }\n}, _temp2);\nexports.default = Tooltip;\n\nfunction reposition_within_screen(x, y, width, height) {\n  var minimal_margin = 4; // in pixels\n\n  if (x < minimal_margin) {\n    x = minimal_margin;\n  } else if (x + width + minimal_margin > window.innerWidth) {\n    x -= x + width + minimal_margin - window.innerWidth;\n  }\n\n  if (y < window.pageYOffset + minimal_margin) {\n    y = window.pageYOffset + minimal_margin;\n  } else if (y + height + minimal_margin > window.pageYOffset + window.innerHeight) {\n    y -= y + height + minimal_margin - (window.pageYOffset + window.innerHeight);\n  }\n\n  return {\n    x: x,\n    y: y\n  };\n}\n\nvar inline_style = {\n  display: 'inline-block'\n};","map":null,"metadata":{},"sourceType":"script"}