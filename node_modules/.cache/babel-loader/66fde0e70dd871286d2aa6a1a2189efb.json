{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _dom = require('./utility/dom');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\nvar Switcher = (_temp2 = _class = function (_PureComponent) {\n  _inherits(Switcher, _PureComponent);\n\n  function Switcher() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Switcher);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Switcher.__proto__ || Object.getPrototypeOf(Switcher)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.focus = function () {\n      return _this.button_0.focus();\n    }, _this.storeContainerComponent = function (_) {\n      return _this.container = _;\n    }, _this.onKeyDown = function (event) {\n      var onKeyDown = _this.props.onKeyDown;\n\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if ((0, _dom.submitFormOnCtrlEnter)(event, _this.input)) {\n        return;\n      }\n\n      if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\n        return;\n      }\n\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          options = _this$props.options;\n\n      switch (event.keyCode) {\n        // Focus the previous option (if present) on left arrow.\n        case 37:\n          event.preventDefault();\n\n          var previous_option_index = _this.previous_focused_option_index();\n\n          if (previous_option_index !== undefined) {\n            // Focus the option <button/> so that\n            // a subsequent \"Spacebar\" keyDown\n            // doesn't select the previously selected\n            // option (e.g. the first one)\n            _this['button_' + previous_option_index].focus(); // // Change the `value`\n            // return onChange(options[previous_option_index].value)\n\n          }\n\n          return;\n        // Focus the next option (if present) on right arrow.\n\n        case 39:\n          event.preventDefault();\n\n          var next_option_index = _this.next_focused_option_index();\n\n          if (next_option_index !== undefined) {\n            // Focus the option <button/> so that\n            // a subsequent \"Spacebar\" keyDown\n            // doesn't select the previously selected\n            // option (e.g. the first one)\n            _this['button_' + next_option_index].focus(); // // Change the `value`\n            // return onChange(options[next_option_index].value)\n\n          }\n\n          return;\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Switcher, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          disabled = _props.disabled,\n          options = _props.options,\n          indicateInvalid = _props.indicateInvalid,\n          error = _props.error,\n          ariaLabel = _props.ariaLabel,\n          style = _props.style,\n          className = _props.className;\n      return _react2.default.createElement('div', {\n        ref: this.storeContainerComponent,\n        onKeyDown: this.onKeyDown,\n        className: (0, _classnames2.default)('rrui__switcher', {\n          'rrui__switcher--disabled': disabled\n        }, className),\n        style: style\n      }, _react2.default.createElement('div', {\n        className: 'rrui__input',\n        role: 'radiogroup',\n        'aria-label': this.props['aria-label'] || ariaLabel,\n        'aria-invalid': indicateInvalid && error ? true : undefined\n      }, options.map(function (option, index) {\n        return _this2.render_button(option, index);\n      })), indicateInvalid && error && _react2.default.createElement('div', {\n        className: 'rrui__input-error'\n      }, error));\n    }\n  }, {\n    key: 'render_button',\n    value: function render_button(option, index) {\n      var _this3 = this;\n\n      var _props2 = this.props,\n          options = _props2.options,\n          value = _props2.value,\n          disabled = _props2.disabled;\n      var selected = value === option.value;\n      var first = index === 0;\n      var last = index === options.length - 1;\n      return _react2.default.createElement('button', {\n        key: option.value,\n        ref: function ref(_ref2) {\n          return _this3['button_' + index] = _ref2;\n        },\n        type: 'button',\n        role: 'radio',\n        'aria-checked': selected,\n        tabIndex: isAnythingSelected(value, options) ? selected ? 0 : -1 : first ? 0 : -1,\n        disabled: disabled,\n        onClick: this.chooser(option.value),\n        className: (0, _classnames2.default)('rrui__button-reset', 'rrui__outline', 'rrui__switcher__option', {\n          'rrui__switcher__option--selected': selected,\n          // CSS selector performance optimization\n          'rrui__switcher__option--disabled': disabled,\n          // Ordering\n          'rrui__switcher__option--first': first,\n          'rrui__switcher__option--last': last,\n          'rrui__switcher__option--middle': !first && !last\n        })\n      }, option.label);\n    } // render_static()\n    // {\n    // \tconst { options } = this.props\n    // \treturn options.map((option, index) => this.render_static_option(option, index))\n    // }\n    // render_static_option(option, index)\n    // {\n    // \tconst { options, name, value } = this.props\n    //\n    // \tconst first = index === 0\n    // \tconst last  = index === options.length - 1\n    //\n    // \treturn (\n    // \t\t<span\n    // \t\t\tkey={ option.value }\n    // \t\t\tclassName={ classNames('rrui__button-reset', 'rrui__outline', 'rrui__switcher__option',\n    // \t\t\t{\n    // \t\t\t\t'rrui__switcher__option--first'  : first,\n    // \t\t\t\t'rrui__switcher__option--last'   : last,\n    // \t\t\t\t'rrui__switcher__option--middle' : !first && !last\n    // \t\t\t}) }>\n    // \t\t\t<input\n    // \t\t\t\ttype=\"radio\"\n    // \t\t\t\tname={ name }\n    // \t\t\t\tchecked={ value === option.value }/>\n    // \t\t\t{ option.label }\n    // \t\t</span>\n    // \t)\n    // }\n\n  }, {\n    key: 'chooser',\n    value: function chooser(value) {\n      var _this4 = this;\n\n      return function (event) {\n        var _props3 = _this4.props,\n            disabled = _props3.disabled,\n            onChange = _props3.onChange;\n\n        if (disabled) {\n          return;\n        } // Call `onChange` only if `value` did actually change\n\n\n        if (value !== _this4.props.value) {\n          onChange(value);\n        }\n      };\n    }\n  }, {\n    key: 'getFocusedOptionIndex',\n    value: function getFocusedOptionIndex() {\n      var _props4 = this.props,\n          options = _props4.options,\n          value = _props4.value;\n      var i = 0;\n\n      while (i < options.length) {\n        if (document.activeElement === this['button_' + i]) {\n          return i;\n        }\n\n        i++;\n      }\n    } // Get the previous focused option index (relative to the currently selected option).\n\n  }, {\n    key: 'previous_focused_option_index',\n    value: function previous_focused_option_index() {\n      var i = this.getFocusedOptionIndex();\n      return i === 0 ? i : i - 1;\n    } // Get the next focused option index (relative to the currently selected option).\n\n  }, {\n    key: 'next_focused_option_index',\n    value: function next_focused_option_index() {\n      var options = this.props.options;\n      var i = this.getFocusedOptionIndex();\n      return i === options.length - 1 ? i : i + 1;\n    }\n  }]);\n\n  return Switcher;\n}(PureComponent), _class.propTypes = {\n  // A list of selectable options\n  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    // Option value\n    value: _propTypes2.default.string.isRequired,\n    // Option label\n    label: _propTypes2.default.string.isRequired\n  })).isRequired,\n  // HTML form input `name` attribute\n  name: _propTypes2.default.string,\n  // If `true` then will be disabled\n  disabled: _propTypes2.default.bool,\n  // The selected option value\n  value: _propTypes2.default.any,\n  // Is called when an option is selected\n  onChange: _propTypes2.default.func.isRequired,\n  // `aria-label` attribute.\n  // Deprecated, use `aria-label` instead.\n  ariaLabel: _propTypes2.default.string,\n  // CSS class\n  className: _propTypes2.default.string,\n  // CSS style object\n  style: _propTypes2.default.object\n}, _class.defaultProps = {\n  // Show `error` (if passed).\n  indicateInvalid: true\n}, _temp2);\nexports.default = Switcher;\n\nfunction isAnythingSelected(value, options) {\n  for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref3;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref3 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref3 = _i.value;\n    }\n\n    var option = _ref3;\n\n    if (option.value === value) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}