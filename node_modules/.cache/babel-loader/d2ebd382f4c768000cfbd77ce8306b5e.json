{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _ExpandableList = require('./ExpandableList');\n\nvar _ExpandableList2 = _interopRequireDefault(_ExpandableList);\n\nvar _List = require('./List');\n\nvar _List2 = _interopRequireDefault(_List);\n\nvar _Close = require('./Close');\n\nvar _Close2 = _interopRequireDefault(_Close);\n\nvar _focus = require('./utility/focus');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\nvar ExpandableMenu = (_temp2 = _class = function (_PureComponent) {\n  _inherits(ExpandableMenu, _PureComponent);\n\n  function ExpandableMenu() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ExpandableMenu);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ExpandableMenu.__proto__ || Object.getPrototypeOf(ExpandableMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.onExpand = function () {\n      return _this.setState({\n        isExpanded: true\n      });\n    }, _this.onCollapse = function (_ref2) {\n      var focusOut = _ref2.focusOut;\n\n      if (!focusOut) {\n        _this.focus();\n      }\n\n      _this.setState({\n        isExpanded: false\n      });\n    }, _this.focus = function () {\n      return (0, _focus.focus)(_this.toggler || _this.togglerNode);\n    }, _this.expand = function () {\n      return _this.list.expand();\n    }, _this.collapse = function () {\n      return _this.list.collapse();\n    }, _this.toggle = function () {\n      return _this.list.toggle();\n    }, _this.onFocusOut = function () {\n      // `window.rruiCollapseOnFocusOut` can be used\n      // for debugging expandable contents.\n      if (window.rruiCollapseOnFocusOut !== false) {\n        _this.collapse();\n      }\n    }, _this.storeListRef = function (ref) {\n      return _this.list = ref;\n    }, _this.storeTogglerRef = function (ref) {\n      return _this.toggler = ref;\n    }, _this.storeTogglerNode = function (node) {\n      return _this.togglerNode = node;\n    }, _this.getTogglerNode = function () {\n      return _this.togglerNode;\n    }, _this.onBlur = function (event) {\n      return _this.list && _this.list.onBlur(event);\n    }, _this.onClick = function (event) {\n      var disabled = _this.props.disabled;\n\n      if (!disabled) {\n        _this.toggle();\n      }\n    }, _this.onKeyDown = function (event) {\n      var disabled = _this.props.disabled;\n\n      if (disabled) {\n        return;\n      }\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        // \"Up\" arrow.\n        // Select the previous item (if present).\n        case 38: // \"Down\" arrow.\n        // Select the next item (if present).\n\n        case 40:\n          return _this.list.onKeyDown(event);\n        // \"Enter\".\n\n        case 13:\n          // Submit containing `<form/>`.\n          // Expand otherwise.\n          _this.expand();\n\n          return event.preventDefault();\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  } // `this.toggler` is deprecated.\n  // (legacy) (deprecated)\n  // Is used to focus legacy togglers.\n  // `this.togglerNode` is only used to determine\n  // whether the focus is \"inside\" the component or \"outside\" of it.\n\n\n  _createClass(ExpandableMenu, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          style = _props.style,\n          className = _props.className,\n          toggler = _props.toggler,\n          togglerAriaLabel = _props.togglerAriaLabel,\n          togglerAriaHasPopup = _props.togglerAriaHasPopup,\n          togglerClassName = _props.togglerClassName,\n          children = _props.children,\n          rest = _objectWithoutProperties(_props, ['style', 'className', 'toggler', 'togglerAriaLabel', 'togglerAriaHasPopup', 'togglerClassName', 'children']);\n\n      var isExpanded = this.state.isExpanded;\n      var menuToggler = void 0;\n      var menuItems = void 0;\n\n      if (toggler) {\n        menuItems = children;\n\n        var togglerElement = _react2.default.createElement(toggler);\n\n        menuToggler = _react2.default.createElement('button', {\n          ref: this.storeTogglerNode,\n          onClick: this.onClick,\n          onKeyDown: this.onKeyDown,\n          onBlur: this.onBlur,\n          'aria-haspopup': togglerAriaHasPopup,\n          'aria-label': togglerAriaLabel,\n          'aria-expanded': isExpanded ? true : false,\n          className: togglerClassName\n        }, togglerElement);\n      } else {\n        menuItems = _react2.default.Children.toArray(children);\n        menuToggler = menuItems.shift();\n        menuToggler = _react2.default.createElement('div', {\n          ref: this.storeTogglerNode,\n          onClick: this.onClick,\n          onKeyDown: this.onKeyDown,\n          onBlur: this.onBlur\n        }, _react2.default.cloneElement(menuToggler, {\n          ref: this.storeTogglerRef\n        }));\n      }\n\n      return _react2.default.createElement('div', {\n        style: style,\n        className: (0, _classnames2.default)('rrui__menu', className)\n      }, menuToggler, _react2.default.createElement(_ExpandableList2.default, _extends({}, rest, {\n        ref: this.storeListRef,\n        'aria-label': this.props['aria-label'],\n        scrollMaxItems: 0,\n        onCollapse: this.onCollapse,\n        onExpand: this.onExpand,\n        onFocusOut: this.onFocusOut,\n        getTogglerNode: this.getTogglerNode,\n        focusSelectedItem: false,\n        className: 'rrui__shadow'\n      }), menuItems));\n    }\n  }]);\n\n  return ExpandableMenu;\n}(PureComponent), _class.propTypes = {\n  // Component CSS class\n  className: _propTypes2.default.string,\n  // CSS style object\n  style: _propTypes2.default.object,\n  // `aria-label` for the \"Close\" button\n  // (which is an \"x\" visible in fullscreen mode).\n  closeLabel: _propTypes2.default.string,\n  // The \"x\" button icon that closes the `<Select/>`\n  // in fullscreen mode on mobile devices.\n  closeButtonIcon: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.oneOf([false])]).isRequired,\n  toggler: _propTypes2.default.func,\n  togglerAriaLabel: _propTypes2.default.string,\n  togglerAriaHasPopup: _propTypes2.default.string,\n  togglerClassName: _propTypes2.default.string\n}, _class.defaultProps = {\n  // The \"x\" button icon that closes the `<Select/>`\n  // in fullscreen mode on mobile devices.\n  closeButtonIcon: _Close.CloseIcon\n}, _temp2);\nexports.default = ExpandableMenu;","map":null,"metadata":{},"sourceType":"script"}