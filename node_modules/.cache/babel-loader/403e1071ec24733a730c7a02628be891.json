{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FILES = exports.FILE = exports.Files = exports.File = exports.supportsMultipleFileUploadOnInputElement = exports.DropFiles = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nexports.getFilesFromEvent = getFilesFromEvent;\nexports.CanDrop = CanDrop;\nexports.DragAndDrop = DragAndDrop;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DropFiles = exports.DropFiles = (_temp2 = _class = function (_React$Component) {\n  _inherits(DropFiles, _React$Component);\n\n  function DropFiles() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, DropFiles);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DropFiles.__proto__ || Object.getPrototypeOf(DropFiles)).call.apply(_ref, [this].concat(args))), _this), _this.node = _react2.default.createRef(), _this.dragTargets = [], _this.setDraggedOver = function (draggedOver) {\n      var setDraggedOver = _this.props.setDraggedOver;\n\n      if (setDraggedOver) {\n        setDraggedOver(draggedOver);\n      }\n    }, _this.onDragOver = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }, _this.onDragEnter = function (event) {\n      event.preventDefault();\n      event.stopPropagation(); // Copied from:\n      // https://github.com/react-dropzone/react-dropzone/blob/master/src/index.js\n      // Count the dropzone and any children that are entered.\n\n      if (_this.dragTargets.indexOf(event.target) === -1) {\n        _this.dragTargets.push(event.target);\n      } // `event.dataTransfer.files` are only accessible on \"drop\" event.\n      // `event.dataTransfer.items` are only accessible in Chrome and FireFox while dragging.\n      // https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/items\n\n\n      if (isDraggingFiles(event)) {\n        _this.setDraggedOver(true);\n      }\n    }, _this.onDragLeave = function (event) {\n      event.preventDefault();\n      event.stopPropagation(); // Copied from:\n      // https://github.com/react-dropzone/react-dropzone/blob/master/src/index.js\n      // Only deactivate once the dropzone and all children have been left.\n\n      _this.dragTargets = _this.dragTargets.filter(function (_) {\n        return _ !== event.target && _this.node.current.contains(_);\n      });\n\n      if (_this.dragTargets.length > 0) {\n        return;\n      }\n\n      _this.setDraggedOver(false);\n    }, _this.onDrop = function (event) {\n      var _this$props = _this.props,\n          onDrop = _this$props.onDrop,\n          multiple = _this$props.multiple;\n      event.preventDefault();\n      event.stopPropagation(); // Reset.\n\n      _this.dragTargets = [];\n\n      _this.setDraggedOver(false);\n\n      var files = getFilesFromEvent(event);\n\n      if (files.length > 0) {\n        onDrop(multiple ? files : files[0]); // Not clear why would it be called.\n        // MDN says it's a \"no-op\".\n        // https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/clear\n        // event.dataTransfer.clearData()\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  } // state = {\n  // \tisDragging: false\n  // }\n  // Copied from:\n  // https://github.com/react-dropzone/react-dropzone/blob/master/src/index.js\n  // Must be `preventDefault`-ed for some weird reasons.\n  // `event` is always triggered when gragging from another window to the browser window.\n\n\n  _createClass(DropFiles, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var div = this.node.current;\n      div.addEventListener('dragenter', this.onDragEnter);\n      div.addEventListener('dragleave', this.onDragLeave);\n      div.addEventListener('dragover', this.onDragOver);\n      div.addEventListener('drop', this.onDrop);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var div = this.node.current;\n      div.removeEventListener('dragenter', this.onDragEnter);\n      div.removeEventListener('dragleave', this.onDragLeave);\n      div.removeEventListener('dragover', this.onDragOver);\n      div.removeEventListener('drop', this.onDrop);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          onDrop = _props.onDrop,\n          setDraggedOver = _props.setDraggedOver,\n          multiple = _props.multiple,\n          rest = _objectWithoutProperties(_props, ['onDrop', 'setDraggedOver', 'multiple']);\n\n      return _react2.default.createElement('div', _extends({\n        ref: this.node\n      }, rest));\n    }\n  }]);\n\n  return DropFiles;\n}(_react2.default.Component), _class.propTypes = {\n  setDraggedOver: _propTypes2.default.func,\n  onDrop: _propTypes2.default.func.isRequired,\n  multiple: _propTypes2.default.bool\n}, _temp2); // Copied from:\n// https://github.com/react-dropzone/react-dropzone/blob/master/src/utils/index.js\n\nvar supportsMultipleFileUploadOnInputElement = exports.supportsMultipleFileUploadOnInputElement = typeof document !== 'undefined' && document && document.createElement ? 'multiple' in document.createElement('input') : true; // Copied from:\n// https://github.com/react-dropzone/react-dropzone/blob/master/src/utils/index.js\n\nfunction isDraggingFiles(event) {\n  // If `event.dataTransfer` is not available then `event.target.files` fallback is used.\n  if (!event.dataTransfer) {\n    return true;\n  } // https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types\n  // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#file\n\n\n  return Array.prototype.some.call(event.dataTransfer.types, function (type) {\n    return type === 'Files' || type === 'application/x-moz-file';\n  });\n} // Copied from:\n// https://github.com/react-dropzone/react-dropzone/blob/master/src/utils/index.js\n\n\nfunction getFilesFromEvent(event) {\n  var dataTransferItemsList = [];\n\n  if (event.dataTransfer) {\n    var dt = event.dataTransfer; // NOTE: Only the 'drop' event has access to DataTransfer.files,\n    // otherwise it will always be empty\n\n    if (dt.files && dt.files.length) {\n      dataTransferItemsList = dt.files;\n    } else if (dt.items && dt.items.length) {\n      // During the drag even the dataTransfer.files is null\n      // but Chrome implements some drag store, which is accesible via dataTransfer.items\n      dataTransferItemsList = dt.items;\n    }\n  } else if (event.target && event.target.files) {\n    dataTransferItemsList = event.target.files;\n  } // Convert from DataTransferItemsList to the native Array\n\n\n  return Array.prototype.slice.call(dataTransferItemsList);\n} // // Copied from:\n// // https://github.com/react-dropzone/react-dropzone/blob/master/src/utils/index.js\n// // Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with\n// // that MIME type will always be accepted\n// function isFileAccepted(file, accept) {\n// \treturn this.props.isFileAccepted(file) || (file.type === 'application/x-moz-file' || this.props.isFileTypeAccepted(file))\n// }\n// Deprecated.\n\n\nfunction CanDrop(type, drop) {\n  throw new Error('`react-dnd` has been removed from `react-responsive-ui` starting from version `0.14.124` due to being buggy and not supported. `react-dnd` has been replaced with simple native HTML file drag-n-drop. Use `<DropFileUpload/>` and `<DropMultiFileUpload/>` components for file upload instead of `DragAndDrop` and `CanDrop` decorators.');\n} // Deprecated.\n\n\nfunction DragAndDrop() {\n  throw new Error('`react-dnd` has been removed from `react-responsive-ui` starting from version `0.14.124` due to being buggy and not supported. `react-dnd` has been replaced with simple native HTML file drag-n-drop. `DragAndDrop` decorator is no longer needed and should be removed. Use `<DropFileUpload/>` and `<DropMultiFileUpload/>` components for file upload.');\n} // Deprecated.\n// Native file drag'n'drop (single file)\n\n\nvar File = exports.File = 'File'; // Deprecated.\n// Native file drag'n'drop (multiple files)\n\nvar Files = exports.Files = 'Files'; // Deprecated.\n// Native file drag'n'drop (single file)\n\nvar FILE = exports.FILE = File; // Deprecated.\n// Native file drag'n'drop (multiple files)\n\nvar FILES = exports.FILES = Files;","map":null,"metadata":{},"sourceType":"script"}