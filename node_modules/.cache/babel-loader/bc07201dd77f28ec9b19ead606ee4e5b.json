{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component; // http://react-day-picker.js.org/examples/?yearNavigation\n// Component will receive date, locale and localeUtils props\n\nvar YearMonthSelect = (_temp = _class = function (_PureComponent) {\n  _inherits(YearMonthSelect, _PureComponent);\n\n  function YearMonthSelect(props) {\n    _classCallCheck(this, YearMonthSelect);\n\n    var _this = _possibleConstructorReturn(this, (YearMonthSelect.__proto__ || Object.getPrototypeOf(YearMonthSelect)).call(this, props));\n\n    _this.onChangeMonth = function (event) {\n      var _this$props = _this.props,\n          date = _this$props.date,\n          onChange = _this$props.onChange;\n      var month = event.target.value;\n\n      if (month !== date.getMonth()) {\n        // The date created is in the user's time zone and the time is `00:00`.\n        // The `day` is `undefined` which means the first one of the `month`.\n        onChange(new Date(date.getFullYear(), month));\n      } // restoreFocus()\n\n    };\n\n    _this.onChangeYear = function (event) {\n      var _this$props2 = _this.props,\n          date = _this$props2.date,\n          onChange = _this$props2.onChange;\n      var year = event.target.value;\n\n      if (year !== date.getFullYear()) {\n        // The date created is in the user's time zone and the time is `00:00`.\n        // The `day` is `undefined` which means the first one of the `month`.\n        onChange(new Date(year, date.getMonth()));\n      } // restoreFocus()\n\n    };\n\n    _this.restoreFocus = function () {\n      var userHasJustChangedYearOrMonth = _this.props.userHasJustChangedYearOrMonth; // Doesn't work on iOS.\n      // Or maybe it does with the new `focus()` being\n      // `focusCalendar()` vs the old `.focus()`.\n      // focus()\n      // A hack for iOS when it collapses\n      // the calendar after selecting a year/month.\n      // Known bug: it won't work when a user\n      // focuses one `<select/>` and then focuses another one\n      // because in that case `onBlur` won't be triggered for the second `<select/>`.\n\n      userHasJustChangedYearOrMonth();\n    };\n\n    var _this$props3 = _this.props,\n        selectYearsIntoPast = _this$props3.selectYearsIntoPast,\n        selectYearsIntoFuture = _this$props3.selectYearsIntoFuture,\n        selectedDay = _this$props3.selectedDay,\n        localeUtils = _this$props3.localeUtils; // The current year in the user's time zone.\n\n    var current_year = new Date().getFullYear();\n    var from_year = selectYearsIntoPast ? current_year - selectYearsIntoPast : current_year;\n    var to_year = selectYearsIntoFuture ? current_year + selectYearsIntoFuture : current_year;\n    var years = new Array(to_year - from_year + 1);\n    var i = 0;\n\n    while (from_year + i <= to_year) {\n      years[i] = from_year + i;\n      i++;\n    } // Makes sure the currently selected year is in the list\n    // to not confuse the user.\n\n\n    if (selectedDay) {\n      var selected_year = selectedDay.getFullYear();\n\n      if (selected_year < from_year) {\n        years.unshift(selected_year);\n      } else if (selected_year > to_year) {\n        years.push(selected_year);\n      }\n    }\n\n    var months = localeUtils.getMonths();\n    _this.months = months;\n    _this.years = years;\n    return _this;\n  }\n\n  _createClass(YearMonthSelect, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          date = _props.date,\n          tabbable = _props.tabbable;\n      return _react2.default.createElement('div', {\n        className: 'DayPicker-Caption'\n      }, _react2.default.createElement('div', {\n        className: 'DayPicker-CaptionSelects'\n      }, _react2.default.createElement('div', {\n        className: 'DayPicker-MonthSelect'\n      }, _react2.default.createElement('select', {\n        onChange: this.onChangeMonth,\n        onBlur: this.restoreFocus,\n        value: date.getMonth(),\n        'aria-label': 'Month',\n        tabIndex: tabbable ? 0 : -1,\n        className: (0, _classnames2.default)( // `:focus` style is implemented via border color\n        // so outline can be muted safely here.\n        'rrui__outline', 'rrui__select__native', 'rrui__select__native--overlay')\n      }, this.months.map(function (month, i) {\n        return _react2.default.createElement('option', {\n          key: i,\n          value: i\n        }, month);\n      })), _react2.default.createElement('button', {\n        type: 'button',\n        tabIndex: -1,\n        className: (0, _classnames2.default)('rrui__button-reset', 'rrui__outline', 'rrui__date-picker__month-select-toggler')\n      }, _react2.default.createElement('div', {\n        className: 'rrui__select__selected-content'\n      }, _react2.default.createElement('div', {\n        className: 'rrui__select__selected-label'\n      }, this.months[date.getMonth()]), _react2.default.createElement('div', {\n        className: 'rrui__select__arrow'\n      })))), _react2.default.createElement('div', {\n        className: 'DayPicker-YearSelect'\n      }, _react2.default.createElement('select', {\n        onChange: this.onChangeYear,\n        onBlur: this.restoreFocus,\n        value: date.getFullYear(),\n        'aria-label': 'Year',\n        tabIndex: tabbable ? 0 : -1,\n        className: (0, _classnames2.default)( // `:focus` style is implemented via border color\n        // so outline can be muted safely here.\n        'rrui__outline', 'rrui__select__native', 'rrui__select__native--overlay')\n      }, this.years.map(function (year, i) {\n        return _react2.default.createElement('option', {\n          key: i,\n          value: year\n        }, year);\n      })), _react2.default.createElement('button', {\n        type: 'button',\n        tabIndex: -1,\n        className: (0, _classnames2.default)('rrui__button-reset', 'rrui__outline', 'rrui__date-picker__year-select-toggler')\n      }, _react2.default.createElement('div', {\n        className: 'rrui__select__selected-content'\n      }, _react2.default.createElement('div', {\n        className: 'rrui__select__selected-label'\n      }, date.getFullYear()), _react2.default.createElement('div', {\n        className: 'rrui__select__arrow'\n      }))))));\n    }\n  }]);\n\n  return YearMonthSelect;\n}(PureComponent), _class.propTypes = {\n  date: _propTypes2.default.instanceOf(Date),\n  onChange: _propTypes2.default.func.isRequired,\n  localeUtils: _propTypes2.default.object,\n  tabbable: _propTypes2.default.bool.isRequired\n}, _class.defaultProps = {\n  // For some weird reason in Chrome 70\n  // the focus is trapped and jumps from\n  // the month `<select/>` back to the `<input/>`\n  // if `tabbable` is `true`.\n  // Works as intended in Firefox though.\n  tabbable: false\n}, _temp);\nexports.default = YearMonthSelect;","map":null,"metadata":{},"sourceType":"script"}